package com.personal.codelearn.leetcode;

import scala.Char;

/**
 * 36.有效的数独
 *
 * @author yb
 */
public class IsValidSudoku36 {
    /**
     * 给出的board是不是满足数独,不是说board是不是能填出来数独
     *
     * @param board 数独
     * @return 是否数独
     */
    public boolean isValidSudoku(char[][] board) {
        // 9*9数独 在横竖都是1-9不重复,在3*3中也是1-9不重复 类似8皇后问题
        // 1.剪枝算法
        // 2.递归
        // 确定不可以设置值的位置

        // 第一层
        for (int i = 0; i < 9; i++) {
            // 第二层
            for (int j = 0; j < 9; j++) {
                char curVal = board[i][j];
                if (curVal == '.') {
                    continue;
                }
                // 检查横
                for (int k = 0; k < 9; k++) {
                    if (k != j && board[i][k] == board[i][j]) {
                        return false;
                    }

                }
                // 检查竖
                for (int k = 0; k < 9; k++) {
                    if (k != i && board[k][j] == board[i][j]) {
                        return false;
                    }
                }
                // 检查3*3方格
                if (!checkX(i, j, board)) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean checkX(int x, int y, char[][] board) {
        int k, j;
        if (x >= 0 && x <= 2) {
            k = 0;
        } else if (x >= 3 && x <= 5) {
            k = 3;
        } else {
            k = 6;
        }
        if (y >= 0 && y <= 2) {
            j = 0;
        } else if (y >= 3 && y <= 5) {
            j = 3;
        } else {
            j = 6;
        }
        for (int i = k; i < k + 3; i++) {
            for (int l = j; l < j + 3; l++) {
                if (i == x && l == y) {
                    continue;
                }
                if (board[i][l] == board[x][y]) {
                    return false;
                }
            }
        }
        return true;
    }

    public static void main(String[] args) {

        char[][] a = new char[][] {
            {'5', '3', '.', '.', '7', '.', '.', '.', '.'}, {
            '6', '.', '.', '1', '9', '5', '.', '.', '.'}, {
            '.', '9', '8', '.', '.', '.', '.', '6', '.'}, {
            '8', '.', '.', '.', '6', '.', '.', '.', '3'}, {
            '4', '.', '.', '8', '.', '3', '.', '.', '1'}, {
            '7', '.', '.', '.', '2', '.', '.', '.', '6'}, {
            '.', '6', '.', '.', '.', '.', '2', '8', '.'}, {
            '.', '.', '.', '4', '1', '9', '.', '.', '5'},
            {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};
        char[][] a2 = new char[][] {
            {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
            {'6', '.', '9', '.', '.', '8', '.', '.', '.'},
            {'.', '.', '.', '4', '.', '6', '.', '.', '.'},
            {'.', '.', '.', '.', '.', '.', '.', '1', '.'},
            {'.', '.', '.', '.', '2', '.', '.', '3', '.'},
            {'.', '4', '.', '.', '.', '.', '.', '.', '4'},
            {'5', '.', '.', '6', '.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '7', '.', '6', '.', '.'}};
        char[][] a3 = new char[][] {
            {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
            {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
            {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
            {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
            {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
            {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
            {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
            {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
            {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};
        IsValidSudoku36 sudoku36 = new IsValidSudoku36();
        System.out.println(sudoku36.isValidSudoku(a3));
    }

}
